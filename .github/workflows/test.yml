name: Test SonarScanner CLI Action

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-cross-platform:
    name: Test Cross-Platform Installation
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        sonar-version: ['7.2.0.5079', '6.2.0.4584']
        cache: ['true', 'false']
        wait-quality-gate: ['true', 'false']
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java (ensure Java is available)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Test SonarScanner CLI Action
      id: setup
      uses: ./
      with:
        sonar-scanner-version: ${{ matrix.sonar-version }}
        cache: ${{ matrix.cache }}
        wait-for-quality-gate: ${{ matrix.wait-quality-gate }}

    - name: Verify installation
      shell: bash
      run: |
        echo "Testing sonar-scanner command..."
        sonar-scanner --version
        echo "SonarScanner CLI installed at: ${{ steps.setup.outputs.sonar-scanner-path }}"
        echo "SonarScanner CLI version: ${{ steps.setup.outputs.sonar-scanner-version }}"
        echo "Quality gate wait setting: ${{ steps.setup.outputs.quality-gate-wait }}"
        
        # Verify outputs match expectations
        if [ "${{ steps.setup.outputs.sonar-scanner-version }}" != "${{ matrix.sonar-version }}" ]; then
          echo "❌ Output version doesn't match expected version"
          exit 1
        fi
        
        if [ "${{ steps.setup.outputs.quality-gate-wait }}" != "${{ matrix.wait-quality-gate }}" ]; then
          echo "❌ Quality gate wait output doesn't match expected value"
          exit 1
        fi

    - name: Test cache effectiveness (if enabled)
      if: matrix.cache == 'true'
      uses: ./
      with:
        sonar-scanner-version: ${{ matrix.sonar-version }}
        cache: 'true'

    - name: Verify cached installation
      if: matrix.cache == 'true'
      shell: bash
      run: |
        echo "Verifying cached installation works..."
        sonar-scanner --version

  test-version-switching:
    name: Test Version Switching
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install first version
      uses: ./
      with:
        sonar-scanner-version: '7.2.0.5079'
        cache: 'false'

    - name: Verify first version
      shell: bash
      run: |
        version_output=$(sonar-scanner --version 2>&1)
        if echo "$version_output" | grep -q "7.2.0.5079"; then
          echo "✅ First version installed correctly"
        else
          echo "❌ First version not installed correctly"
          exit 1
        fi

    - name: Install different version
      uses: ./
      with:
        sonar-scanner-version: '6.2.0.4584'
        cache: 'false'

    - name: Verify version change
      shell: bash
      run: |
        version_output=$(sonar-scanner --version 2>&1)
        if echo "$version_output" | grep -q "6.2.0.4584"; then
          echo "✅ Version change handled correctly"
        else
          echo "❌ Version change not handled correctly"
          exit 1
        fi

  test-error-handling:
    name: Test Error Handling
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Test invalid version (should fail gracefully)
      id: test-invalid
      continue-on-error: true
      uses: ./
      with:
        sonar-scanner-version: '999.999.999.999'
        cache: 'false'

    - name: Verify error handling
      run: |
        if [ "${{ steps.test-invalid.outcome }}" = "failure" ]; then
          echo "✅ Invalid version correctly failed"
        else
          echo "❌ Invalid version should have failed but didn't"
          exit 1
        fi

  test-quality-gate:
    name: Test Quality Gate Parameter
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Test quality gate enabled
      id: setup-qg-true
      uses: ./
      with:
        wait-for-quality-gate: 'true'

    - name: Verify quality gate true output
      shell: bash
      run: |
        if [ "${{ steps.setup-qg-true.outputs.quality-gate-wait }}" = "true" ]; then
          echo "✅ Quality gate wait=true output correct"
        else
          echo "❌ Quality gate wait=true output incorrect: ${{ steps.setup-qg-true.outputs.quality-gate-wait }}"
          exit 1
        fi

    - name: Test quality gate disabled
      id: setup-qg-false
      uses: ./
      with:
        wait-for-quality-gate: 'false'

    - name: Verify quality gate false output
      shell: bash
      run: |
        if [ "${{ steps.setup-qg-false.outputs.quality-gate-wait }}" = "false" ]; then
          echo "✅ Quality gate wait=false output correct"
        else
          echo "❌ Quality gate wait=false output incorrect: ${{ steps.setup-qg-false.outputs.quality-gate-wait }}"
          exit 1
        fi

    - name: Test default quality gate (should be false)
      id: setup-qg-default
      uses: ./

    - name: Verify default quality gate output
      shell: bash
      run: |
        if [ "${{ steps.setup-qg-default.outputs.quality-gate-wait }}" = "false" ]; then
          echo "✅ Default quality gate wait=false output correct"
        else
          echo "❌ Default quality gate wait output incorrect: ${{ steps.setup-qg-default.outputs.quality-gate-wait }}"
          exit 1
        fi

  integration-test:
    name: Integration Test with Real Project
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup SonarScanner
      id: setup-sonar
      uses: ./
      with:
        sonar-scanner-version: '7.2.0.5079'
        wait-for-quality-gate: 'true'

    - name: Create test project
      run: |
        mkdir -p src/main/java/com/example
        cat > src/main/java/com/example/App.java << 'EOF'
        package com.example;
        
        public class App {
            public static void main(String[] args) {
                System.out.println("Hello World!");
            }
            
            public String getMessage() {
                return "Hello World!";
            }
        }
        EOF
        
        cat > sonar-project.properties << 'EOF'
        sonar.projectKey=integration-test
        sonar.projectName=Integration Test
        sonar.projectVersion=1.0
        sonar.sources=src
        sonar.java.source=17
        sonar.java.target=17
        EOF

    - name: Test project analysis
      run: |
        echo "Testing SonarScanner with real project..."
        echo "Quality gate wait parameter: ${{ steps.setup-sonar.outputs.quality-gate-wait }}"
        sonar-scanner \
          -Dsonar.verbose=true \
          -Dsonar.scanner.dumpToFile=/tmp/analysis-dump.txt \
          -Dsonar.qualitygate.wait=${{ steps.setup-sonar.outputs.quality-gate-wait }} \
          || echo "Expected failure without server connection"
        
        if [ -f "/tmp/analysis-dump.txt" ]; then
          echo "✅ Scanner successfully analyzed project"
          echo "Analysis dump created with $(wc -l < /tmp/analysis-dump.txt) lines"
        fi