name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Validate action.yml
      run: |
        # Basic YAML validation
        python -c "import yaml; yaml.safe_load(open('action.yml'))"
        echo "✅ action.yml is valid YAML"
        
    - name: Check scripts syntax
      run: |
        # Check bash script syntax
        bash -n scripts/run-sonar-analysis.sh
        echo "✅ Bash script syntax is valid"
        
        # Check PowerShell script syntax (basic)
        if command -v pwsh >/dev/null 2>&1; then
          pwsh -Command "Get-Content scripts/run-sonar-analysis.ps1 | Out-Null"
          echo "✅ PowerShell script syntax is valid"
        else
          echo "ℹ️ PowerShell not available, skipping syntax check"
        fi

  test-action:
    name: Test Action
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        sonar-version: ['7.2.0.5079', '6.2.0.4584']
        include:
          # Test latest version combinations
          - os: ubuntu-latest
            sonar-version: '5.0.1.3006'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Create test project
      shell: bash
      run: |
        mkdir -p src/main/java/com/example
        cat > src/main/java/com/example/App.java << 'EOF'
        package com.example;
        
        public class App {
            public static void main(String[] args) {
                System.out.println("Hello World!");
            }
        }
        EOF

    - name: Test Action
      id: test-action
      continue-on-error: true  # Expected to fail without valid server
      uses: ./
      with:
        sonar-host-url: 'https://sonarqube.example.com'
        sonar-token: 'fake-token'
        sonar-project-key: 'ci-test-project'
        sonar-project-name: 'CI Test Project'
        sonar-sources: 'src'
        sonar-scanner-version: ${{ matrix.sonar-version }}
        sonar-verbose: 'true'
        extra-args: '-Dsonar.scanner.dumpToFile=/tmp/ci-analysis-dump.txt'

    - name: Verify Analysis Attempt
      shell: bash
      run: |
        echo "Analysis result: ${{ steps.test-action.outputs.result }}"
        echo "SonarScanner version: ${{ steps.test-action.outputs.version }}"
        echo "Installation path: ${{ steps.test-action.outputs.path }}"
        
        # Verify expected version is installed/used
        if [ "${{ steps.test-action.outputs.version }}" = "${{ matrix.sonar-version }}" ]; then
          echo "✅ Correct version ${{ matrix.sonar-version }} used"
        else
          echo "❌ Expected version ${{ matrix.sonar-version }} not found"
          exit 1
        fi
        
        # Verify that analysis was attempted (expected to fail without valid server)
        if [ -f "/tmp/ci-analysis-dump.txt" ] || [ "${{ steps.test-action.outcome }}" = "failure" ]; then
          echo "✅ SonarScanner CLI attempted analysis (expected to fail without valid server)"
        else
          echo "❌ SonarScanner CLI didn't attempt analysis"
          exit 1
        fi

  test-parameter-validation:
    name: Test Parameter Validation
    needs: lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Test Missing Required Parameters
      id: test-missing
      continue-on-error: true
      uses: ./
      with:
        # Missing required sonar-host-url, sonar-token, sonar-project-key
        sonar-project-name: 'Test Project'

    - name: Verify Parameter Validation
      run: |
        if [ "${{ steps.test-missing.outcome }}" = "failure" ]; then
          echo "✅ Missing required parameters correctly failed"
        else
          echo "❌ Missing required parameters should have failed"
          exit 1
        fi

  test-edge-cases:
    name: Test Edge Cases
    needs: lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Create test project
      run: |
        mkdir -p src
        echo "console.log('test');" > src/app.js

    - name: Test Invalid Version (should fail gracefully)
      id: test-invalid
      continue-on-error: true
      uses: ./
      with:
        sonar-host-url: 'https://sonarqube.example.com'
        sonar-token: 'fake-token'
        sonar-project-key: 'invalid-version-test'
        sonar-scanner-version: '999.999.999.999'
        sonar-sources: 'src'

    - name: Verify Invalid Version Handling
      run: |
        if [ "${{ steps.test-invalid.outcome }}" = "failure" ]; then
          echo "✅ Invalid version correctly failed"
        else
          echo "❌ Invalid version should have failed but didn't"
          exit 1
        fi

    - name: Test Multiple Analysis Attempts
      continue-on-error: true
      uses: ./
      with:
        sonar-host-url: 'https://sonarqube.example.com'
        sonar-token: 'fake-token'
        sonar-project-key: 'multi-test-1'
        sonar-sources: 'src'
        sonar-scanner-version: '7.2.0.5079'

    - name: Test Different Version
      continue-on-error: true
      uses: ./
      with:
        sonar-host-url: 'https://sonarqube.example.com'
        sonar-token: 'fake-token'
        sonar-project-key: 'multi-test-2'
        sonar-sources: 'src'
        sonar-scanner-version: '6.2.0.4584'

    - name: Verify Multiple Attempts
      run: |
        echo "✅ Multiple analysis attempts completed (expected to fail without valid server)"

  test-features:
    name: Test Analysis Features
    needs: lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Node.js for ESLint
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Create comprehensive test project
      run: |
        # Java source
        mkdir -p src/main/java/com/example
        cat > src/main/java/com/example/Calculator.java << 'EOF'
        package com.example;
        
        public class Calculator {
            public int add(int a, int b) {
                return a + b;
            }
        }
        EOF
        
        # JavaScript source
        mkdir -p src/js
        cat > src/js/utils.js << 'EOF'
        function formatMessage(message) {
            return message.trim().toUpperCase();
        }
        
        module.exports = { formatMessage };
        EOF

    - name: Setup ESLint
      run: |
        npm init -y
        npm install --save-dev eslint
        cat > .eslintrc.js << 'EOF'
        module.exports = {
            env: { node: true, es2021: true },
            extends: ['eslint:recommended'],
            rules: { 'no-unused-vars': 'error' }
        };
        EOF
        npx eslint src/js --format json --output-file eslint-report.json || true

    - name: Test Feature Integration
      continue-on-error: true  # Expected to fail without valid server
      uses: ./
      with:
        sonar-host-url: 'https://sonarqube.example.com'
        sonar-token: 'fake-token'
        sonar-project-key: 'feature-test'
        sonar-project-name: 'Feature Integration Test'
        sonar-sources: 'src'
        enable-jacoco: 'true'
        enable-eslint: 'true'
        enable-hadolint: 'true'
        sonar-verbose: 'true'
        extra-args: |
          -Dsonar.java.binaries=target/classes
          -Dsonar.eslint.reportPaths=eslint-report.json
          -Dsonar.scanner.dumpToFile=/tmp/feature-dump.txt

    - name: Verify Feature Integration
      run: |
        echo "✅ Feature integration test completed"
        if [ -f "/tmp/feature-dump.txt" ]; then
          echo "✅ Analysis configuration dump created"
        fi

  test-integration:
    name: Integration Test
    needs: [lint, test-action]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Create Test Project
      run: |
        mkdir -p src/main/java/com/example
        cat > src/main/java/com/example/Service.java << 'EOF'
        package com.example;
        
        public class Service {
            private String name;
            
            public Service(String name) {
                this.name = name;
            }
            
            public String processData(String input) {
                if (input == null) {
                    return "default";
                }
                return name + ": " + input.toUpperCase();
            }
            
            public boolean isValid(String data) {
                return data != null && !data.trim().isEmpty();
            }
        }
        EOF

    - name: Test Comprehensive Analysis
      continue-on-error: true  # Expected to fail without valid server
      uses: ./
      with:
        sonar-host-url: 'https://sonarqube.example.com'
        sonar-token: 'fake-token'
        sonar-project-key: 'integration-test'
        sonar-project-name: 'Integration Test Project'
        sonar-project-version: '1.0.0'
        sonar-sources: 'src/main'
        sonar-encoding: 'UTF-8'
        sonar-verbose: 'true'
        extra-args: |
          -Dsonar.java.source=17
          -Dsonar.java.target=17
          -Dsonar.scanner.dumpToFile=/tmp/integration-dump.txt

    - name: Verify Integration Test
      run: |
        echo "✅ Integration test completed"
        echo "Expected to fail without valid SonarQube server connection"
        if [ -f "/tmp/integration-dump.txt" ]; then
          echo "✅ Analysis configuration successfully processed"
          echo "Integration dump size: $(wc -l < /tmp/integration-dump.txt) lines"
        else
          echo "ℹ️ Analysis attempted (no dump file created)"
        fi